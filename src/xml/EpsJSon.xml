<?xml-stylesheet type='text/css' href='parameter.css'?>
<magics>

<class name="WrepJSon" xmltag='wrepjson' prefix='wrepjson' action='pwrepjson'  
           directory='web' include='EpsJSon.h' >
 <parameter name='wrepjson_input_filename' from='string' to='string' 
 	    member='path' default=''>
  	<documentation> Path to the file containing the Bufr data </documentation>
 </parameter>
    <parameter name='wrepjson_parameter_information' from='string' to='string'
             member='param_info' default='' >
         <documentation> Product information for  key=parameter_info  </documentation>
        </parameter> 
   <parameter name='wrepjson_product_information' from='string' to='string'
             member='product_info' default='' >
         <documentation> Product information for  key=product_info </documentation>
        </parameter>
    <parameter name='wrepjson_family' from='string' to='string' 
             member='family' default='eps' >
         <documentation> Forecast information to plot!  </documentation>
   
        </parameter>
 
 <parameter name='wrepjson_plumes_interval' from='float' to='float' 
 	    member='plumes' default='1'>
  	<documentation> plumes interval </documentation>
 </parameter>
  <parameter name='wrepjson_information' from='string' to='bool' 
 	    member='information' default='on'>
  	<documentation> Plot or not information about station/forecast  in a long title   </documentation>  
 </parameter>
 <parameter name='wrepjson_keyword' from='string' to='string' 
 	    member='keyword' default=''>
  	<documentation> if several eps data are put in the same json object, give the keyowrd to find them   </documentation>  
 </parameter>
   <parameter name='wrepjson_station_name' from='string' to='string'
            member='station_name' default='' >
       <documentation>Name of the station to use in the title </documentation>
   </parameter>
  <parameter name='wrepjson_parameter' from='string' to='string'
            member='param' default='1'>
             <documentation> Scaling factor to apply to the values</documentation>
        </parameter>
         <parameter name='wrepjson_parameter_scaling_factor' from='float' to='float'
            member='param_scaling_factor' default='1'>
             <documentation> Scaling factor to apply to the values</documentation>
        </parameter>
         <parameter name='wrepjson_parameter_offset_factor' from='float' to='float'
            member='param_offset_factor' default='0'>
             <documentation> Scaling factor to apply to the values</documentation>
        </parameter>
        <parameter name='wrepjson_clim_parameter' from='string' to='string'
            member='clim_param' default='' >           
            <documentation> date to select for the clim In date format (YYYYMMDDHHHH)</documentation>
        </parameter>  
        
        
        <parameter name='wrepjson_clim_step' from='int' to='int'
            member='clim_step' default='36' >           
            <documentation> date to select for the clim In date format (YYYYMMDDHHHH)</documentation>
        </parameter> 
        
        <parameter name='wrepjson_steps' from='intarray' to='intarray'
            member='steps' default='intarray()' >           
            <documentation> steps to extract ( legend will use step+12) </documentation>
        </parameter>
         
       <parameter name='wrepjson_y_axis_percentile' from='float' to='float'
            member='percentile' default='1'>           
        <documentation> use of threshold   </documentation>
        </parameter>
        
         <parameter name='wrepjson_y_axis_threshold' from='float' to='float'
            member='threshold' default='50'>           
            <documentation> use of threshold   to get rid of the unlikely values</documentation>
     
        </parameter>
         <parameter name='wrepjson_y_max_threshold' from='float' to='float'
            member='y_max_threshold' default='INT_MAX'>           
            <documentation> If all the values are below the threshold, use the threshold as max value when automatic setting of y axis</documentation>
     
        </parameter>
	<parameter  member='y_percent' to='float' default='0.01' from='float' name='wrepjson_y_percentage'>           
            		<documentation > percentage of the range to add to compute automatic minmax of axis.	</documentation>
     
        	</parameter>
	   <parameter name='wrepjson_temperature_correction' from='string' to='bool'
            member='correction' default='off'>
            <documentation> Temperature correction  </documentation>

        </parameter>

	   <parameter name='wrepjson_missing_value' from='float' to='float'
            member='missing_value' default='-9999'>
            <documentation> Missing value  </documentation>

        </parameter>

        
</class>
<class name="EfiJSon" xmltag='efijson' prefix='efijson' action='pmetgram'  directory='web' >
	 <parameter name='efijson_input_filename' from='string' to='string' 
 	    member='path' default=''>
  	<documentation> Path to the file containing the Efi data (JSon format) </documentation>
 	</parameter>
 	
         
        <parameter name='efi_long_title' from='string' to='bool'
            member='long_title' default='off' xml='long_title'>
            <documentation> efigram long title ( Point Position ... General title!) </documentation>
            <migration> New Magics: Parameter eps_longitude sent to new Magics[EpsgramDecoder].  </migration>
        </parameter>
        <parameter name='efi_title' from='string' to='bool'
            member='title' default='off' xml='title'>
            <documentation> epsgram title ( parameter name) </documentation>
            <migration> New Magics: Parameter eps_longitude sent to new Magics[EpsgramDecoder].  </migration>
        </parameter>
        
        
          <parameter name='efi_legend' from='string' to='bool'
            member='legend' default='on'>           
            <documentation> legend </documentation>
        </parameter>  
       
        
         <parameter name='efi_legend_colour_list' from='stringarray' to='stringarray'
            member='legend_colours' default='stringarray()'>           
            <documentation> legend box colour list  </documentation>
        </parameter>
         <parameter name='efi_legend_box_type' from='string' to='string'
            member='legend_type' default='both'>           
            <documentation> both/negative/positive </documentation>
        </parameter>
        <parameter name='efi_legend_normal_colour' from='string' to='Colour'
            member='legend_normal_colour' default='black'>           
            <documentation> legend colour box </documentation>
        </parameter>
          <parameter name='efi_legend_normal_thickness' from='int' to='int'
            member='legend_normal_thickness' default='4'>           
            <documentation> legend colour box </documentation>
        </parameter>
         
 </class>
</magics>
