#!/bin/ksh
# Runs the EPSgram program to generate EPSgrams

# Parse command-line arguments
# Possible options:
#   -checkup      : Runs the epsgrams intended for the checkup test suite
#   -manual       : Runs the epsgrams intended for the manual
#   -valgrind     : Runs the examples under Valgrind - output to <prog>.vlog

. ./message.ksh

valgrind=""
srcdir="epsgram/test"
filespec=*.epsml
outdir="../../../../html/test/epsgram"
iconsdir="../../icons"
logdir=$outdir
gifdir=$outdir
nogifs=0
summary="-------\n
Unless overridden by the flags below, the shared library is used.\n
testsuite flags:"

for arg;do
    if [[ $arg = "-h" || $arg = "-help" || $arg = "--help" ]]
    then
        echo ""
        echo "make_epsgram_testsuite"
        echo "Possible options:"
        echo "   -checkup    : Runs the epsgrams intended for the checkup test suite"
        echo "   -manual     : Runs the epsgrams intended for the manual"
        echo "   -valgrind   : Runs the examples under Valgrind - output to <prog>.vlog"
        echo ""
        exit
    fi


    if [[ $arg = "-checkup" ]]
    then
        srcdir="epsgram/checkup"
        outdir="../../../../html/checkup/epsgram"
    fi

    if [[ $arg = "-manual" ]]
    then
        srcdir="epsgram/manual"
        outdir="../../../../html/manual/metgram"
    fi

    if [[ $arg = "-valgrind" ]]
    then
        valgrind="-valgrind"
	summary="$summary\n run through valgrind"
    fi
done


# decide which version of 'convert' to use

. ./setconvert
echo "Using convert from directory: $CONVERT_DIR"




cd $srcdir


# create any necessary directories

mkdir -p $outdir


# create symbolic links to the installed templates

ln -f -s $MAGPLUS_HOME/share/eps.template    eps.template
ln -f -s $MAGPLUS_HOME/share/epsA3.template  epsA3.template



# Run the MagML Interpreter on the source files

for srcfile in $filespec
do
    echo $srcfile
    bname=`basename $srcfile .epsml`
    logfile=$outdir/$bname.log
    errfile=$outdir/$bname.err
    timefile=$outdir/$bname.time

    msg "    [Generating $bname]"

    (time (metgramx $srcfile > $logfile 2> $errfile)) 2> $timefile

done



for srcfile in metgram-*.xml
do
    echo $srcfile
    bname=`basename $srcfile .epsml`
    logfile=$outdir/$bname.log
    errfile=$outdir/$bname.err
    timefile=$outdir/$bname.time

    msg "    [Generating $bname]"

    (time (metgramx $srcfile > $logfile 2> $errfile)) 2> $timefile
    
    # XXX temporary mesaure - we only get ps.ps from the app just now, so rename:
    
    mv ps.ps $bname.ps

done



# convert PostScript outputs to gif for the web page

no_output_small="$iconsdir/no_output_small.gif"

for ext in ".ps" ".gif"
do
    for psfile in *$ext
    do
        bname=`basename $psfile $ext`
        thumbname="$outdir/$bname"_small.gif
            msg "    [checking to GIF: $psfile, $thumbname]"

        # is the postscript file newer than the gif?

        if [[ $psfile -nt $thumbname  &&  $nogifs -ne 1 ]]
        then
            msg "    [Converting to GIF: $psfile, $thumbname]"


            # first copy over the 'wait' .gif files in case the conversion
            # does not work

            cp $no_output_small $thumbname
            chmod u+w $thumbname


            # ok, now do the conversion....

            "$CONVERT_DIR"convert  -geometry 180X252 -delay 150 $psfile $thumbname
        fi

    done
done





# move the output files to the output directory

mv *.ps   $outdir
mv *.gif  $outdir
mv *.meta $outdir






# copy our static icons across if necessary

cp -u $iconsdir/* $outdir
for iconfile in $iconsdir/*.gif
do
    chmod ug+w $outdir/`basename $iconfile`
done



msg "Generating HTML..."
cd ../../../..
./tohtml - metgrams

# create a date string, replace spaces with underscores
msg "Done: `date | sed 's/ /_/g'`"




#
#. setconvert
#echo "Using convert from directory: $CONVERT_DIR"
#
#
#
## Create GIF images of the outputs for the web pages
#
#no_output_small="icons/no_output_small.gif"
#
#for psfile in $outdir/*.ps
#do
#    bname=`basename $psfile .ps`
#    thumbname="$outdir/$bname"_small.gif
#    
#    # is the postscript file newer than the gif?
#
#    if [[ $psfile -nt $gifname  &&  $nogifs -ne 1 ]]
#    then
#        msg "    [Converting to GIF: $psfile, $thumbname]"
#
#
#        # first copy over the 'wait' .gif files in case the conversion
#        # does not work
#        
#        cp $no_output_small $thumbname
#        chmod u+w $thumbname
#
#
#        # ok, now do the conversion....
#
#        "$CONVERT_DIR"convert  -geometry 180X252  -rotate 90 -delay 150 $psfile $thumbname
#    fi
#
#done
#
#
#
#
#
## copy our static icons across if necessary
#
#cp -u icons/* $outdir
#for iconfile in icons/*.gif
#do
#    chmod ug+w $outdir/`basename $iconfile`
#done
#
#
#
## echo our summary to a log file
#
#echo "HOST:            $HOST"            >  logs/magml_summary.txt
#echo "ARCH:            $ARCH"            >> logs/magml_summary.txt
#echo "USER:            $USER"            >> logs/magml_summary.txt
#echo "PGF flags:       $pgf_flags"       >> logs/magml_summary.txt
#echo "MAGPLUSLIB(_S):"                   >> logs/magml_summary.txt
#echo "`echo $mpp_lib | sed 's/ /\n                 /g'`"   >> logs/magml_summary.txt
#echo "LD_LIBRARY_PATH:  "                >> logs/magml_summary.txt
#echo "`echo $LD_LIBRARY_PATH | sed 's/:/\n                 /g'`"   >> logs/magml_summary.txt
#echo "EMOSLIB           $EMOSLIB"        >> logs/magml_summary.txt
#
#echo $summary    >> logs/magml_summary.txt
#echo "-------\n" >> logs/magml_summary.txt
#echo `date`      >> logs/magml_summary.txt
#
#
#
## finally, run the 'tohtml' utility to copy all program source and timings
## to the html directory
#
#msg "Generating HTML..."
#cd ../..
#tohtml
#
#
## create a date string, replace spaces with underscores
#msg "Done: `date | sed 's/ /_/g'`"
#
