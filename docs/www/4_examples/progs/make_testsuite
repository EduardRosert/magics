#!/bin/ksh
# Converts the output plots from example programs into GIF images
# complete with thumbnails.

# Parse command-line arguments
# Possible options:
#   -classic      : Runs the old ('classic') test suite
#   -checkup      : Runs the 'checkup' test suite
#   -drivers      : Runs the 'drivers' test suite
#   -nogifs       : PostScript output will not be converted to GIF format
#   -montage      : PostScript output will be converted to GIF montage
#   -nomag69      : MAGICS 6.9 version will not be compiled
#   -nompp        : Magics++ version will not be compiled
#   -rmafter      : Executables will be removed after being run
#   -nocompilempp : All Magics++ programs will be run, but not recompiled
#   -f32          : Force 32-bit mode compilation
#   -f64          : Force 64-bit mode compilation
#   -single       : Force single-precision floats
#   -staticmpp    : Use the static magics++ library
#   -quick        : Cylindrical projection and PostScript output only
#   -onlyodb      : Will only run the ODB examples
#   -psonly       : PostScript output only
#   -ps_gif       : Multiple output formats in a single pass
#   -ps_gif_svg   : Multiple output formats in a single pass
#   -ps_png_svg   : Multiple output formats in a single pass
#   -ps_gif_png_svg   : Multiple output formats in a single pass
#   -noodb        : Will not run the ODB examples
#   -nocontres    : Will not run the contour resolution examples
#   -noakima      : Will not run the Akima-testing examples
#   -nohires      : Will not run the high-resolution data examples
#   -valgrind     : Runs the examples under Valgrind - output to <prog>.vlog
#   -verbose      : Echos compiler commands to stdout

. ./message.ksh


nogifs=0
nomontage=1
nomag69=0
nompp=0
nocompilempp=""
quick=""
outformats=""
noodb="-noodb" # new default (02/09/2009)
nocontres=""
noakima=""
nohires=""
rmafter=""
valgrind=""
f32=""
f64=""
single=""
drivers=""
onlyodb=""
staticmpp=""
tohtmlfortranflag="-fortran"
verbose=""

thumbsize="180X252"
outdir="test"
newline=`echo "\n"`
summary_extra=""
summary="-------$newline
Unless overridden by the flags below, the shared library is used.$newline
testsuite flags:"

for arg;do
    if [[ $arg = "-h" || $arg = "-help" || $arg = "--help" ]]
    then
        echo ""
        echo "make_testsuite"
        echo "Possible options:"
        echo "   -classic      : Runs the old ('classic') test suite"
        echo "   -checkup      : Runs the 'checkup' test suite"
        echo "   -drivers      : Runs the 'drivers' test suite"
        echo "   -nogifs       : PostScript output will not be converted to GIF format"
        echo "   -montage      : PostScript output will be converted to GIF montage"
        echo "   -nomag69      : MAGICS 6.9 version will not be compiled"
        echo "   -nompp        : Magics++   version will not be compiled"
        echo "   -rmafter      : Executables will be removed after being run"
        echo "   -nocompilempp : All Magics++ programs will be run, but not recompiled"
        echo "   -f32          : Force 32-bit mode compilation"
        echo "   -f64          : Force 64-bit mode compilation"
        echo "   -single       : Force single-precision floats"
        echo "   -staticmpp    : Use the static magics++ library"
        echo "   -quick        : Cylindrical projection and PostScript output only"
        echo "   -psonly       : PostScript output only"
        echo "   -ps_gif       : Multiple output formats in a single pass"
        echo "   -ps_gif_svg   : Multiple output formats in a single pass"
        echo "   -ps_png_svg   : Multiple output formats in a single pass"
        echo "   -ps_gif_png_svg   : Multiple output formats in a single pass"
        echo "   -smallthumbs  : Generates smalle thumbnail images"
        echo "   -onlyodb      : Will only run the ODB examples"
        echo "   -noodb        : Will not run the ODB examples"
        echo "   -nocontres    : Will not run the contour resolution examples"
        echo "   -noakima      : Will not run the Akima-testing examples"
        echo "   -nohires      : Will not run the high-resolution data examples"
        echo "   -valgrind     : Runs the examples under Valgrind - output to <prog>.vlog"
        echo "   -verbose      : Echos compiler commands to stdout"
        echo ""
        exit
    fi

    if [[ $arg = "-nogifs" ]]
    then
        nogifs=1
    fi

    if [[ $arg = "-montage" ]]
    then
        nomontage=0
    fi

    if [[ $arg = "-nomag69" ]]
    then
        nomag69=1
    fi

    if [[ $arg = "-nompp" ]]
    then
        nompp=1
    fi

    if [[ $arg = "-verbose" ]]
    then
        verbose="-verbose"
    fi

    if [[ $arg = "-rmafter" ]]
    then
        rmafter="-rmafter"
    fi

    if [[ $arg = "-nocompilempp" ]]
    then
        nocompilempp="-nocompile"
    fi

    if [[ $arg = "-f32" ]]
    then
        f32="-f32"
        summary_extra="$summary_extra$newline 32-bit mode"
    fi

    if [[ $arg = "-f64" ]]
    then
        f64="-f64"
        summary_extra="$summary_extra$newline 64-bit mode"
    fi

    if [[ $arg = "-single" ]]
    then
        single="-single"
        summary_extra="$summary_extra$newline single precision"
    fi

    if [[ $arg = "-staticmpp" ]]
    then
        staticmpp="-static"
        summary_extra="$summary_extra$newline static library"
    fi

    if [[ $arg = "-classic" ]]
    then
        outdir="classic"
    fi

    if [[ $arg = "-checkup" ]]
    then
        outdir="checkup"
    fi

    if [[ $arg = "-drivers" ]]
    then
        drivers="-drivers"
        tohtmlfortranflag="-fortran_drivers"
    fi

    if [[ $arg = "-quick" ]]
    then
        quick="-quick"
    fi

    if [[ $arg = "-psonly" ]]
    then
        outformats="-psonly"
    fi

    if [[ $arg = "-ps_gif" ]]
    then
        outformats="-ps_gif"
    fi

    if [[ $arg = "-ps_gif_svg" ]]
    then
        outformats="-ps_gif_svg"
    fi

    if [[ $arg = "-ps_png_svg" ]]
    then
        outformats="-ps_png_svg"
    fi

    if [[ $arg = "-ps_gif_png_svg" ]]
    then
        outformats="-ps_gif_png_svg"
    fi

    if [[ $arg = "-smallthumbs" ]]
    then
        thumbsize="90X126"
    fi

    if [[ $arg = "-onlyodb" ]]
    then
        onlyodb="-onlyodb"
        nomag69=1
    fi

    if [[ $arg = "-noodb" ]]
    then
        noodb="-noodb"
    fi

    if [[ $arg = "-nocontres" ]]
    then
        nocontres="-nocontres"
    fi

    if [[ $arg = "-noakima" ]]
    then
        noakima="-noakima"
    fi

    if [[ $arg = "-nohires" ]]
    then
        nohires="-nohires"
    fi

    if [[ $arg = "-valgrind" ]]
    then
        valgrind="-valgrind"
        summary_extra="$summary_extra$newline run through valgrind"
    fi
    
done

summary="$summary $summary_extra"

echo "summary: " $summary



. ./setconvert
echo "Using convert from directory: $CONVERT_DIR"



mkdir -p ../../html/$outdir/fortran
mkdir -p ../../html/$outdir/fortran_static

# compile all changed programs, for both old and new MAGICS

if [[ nomag69 -eq 0 ]]
then
    ./compile_mag69 "-$outdir"
fi

if [[ nompp -eq 0 ]]
then
    ./compile_magplus  $nocompilempp -$outdir $quick $outformats $drivers $f32 $f64 $single $staticmpp $noodb $nocontres $noakima $nohires $rmafter $valgrind $verbose $onlyodb
fi


if [[ $staticmpp = "-static" ]]
then
    fortrandir="fortran_static"
else
    fortrandir="fortran"
fi


gifdir=../../html/$outdir/$fortrandir
psdir=../../html/$outdir/$fortrandir
logdir=../../html/$outdir/$fortrandir


# copy the log/error files across

cp -u logs/*.log  $logdir
cp -u logs/*.vlog $logdir
cp -u logs/*.err  $logdir


cp -f icons/no_output.gif       $gifdir
cp -f icons/no_output_small.gif $gifdir


no_output_large="$gifdir/no_output.gif"
no_output_small="$gifdir/no_output_small.gif"





# copy across all the outputs

# msg "Copying output files..."

# cp -u -f  ps/*.*   $psdir

# for outfile in ps/*.*
# do  
#     if [[ ! -e $psdir/$outfile  ||  $outfile -nt "$psdir/$outfile" ]]
#     then
#         cp $outfile $psdir
# 	echo "Copying $outfile"
#     fi
# done





for psfile in $psdir/*.ps
do
    bname=`basename $psfile .ps`
    gifname="$gifdir/$bname"_med.gif
    thumbname="$gifdir/$bname"_small.gif
#    mgifname="$psdir/$bname.gif"                 # the GIF produced by Magics++
#    mgifthumb="$gifdir/$bname"_gif_small.gif     # the thumbnail of the GIF produced by Magics++

    
    # is the postscript file newer than the gif?

    if [[ $psfile -nt $thumbname  &&  $nogifs -ne 1 ]]
    then
        msg "    [Converting to GIF: $psfile, $thumbname]"


        # first copy over the 'wait' .gif files in case the conversion
        # does not work
        
#        cp $no_output_large $gifname
        cp $no_output_small $thumbname
#        chmod u+w $gifname
        chmod u+w $thumbname


        # ok, now do the conversion....

#        "$CONVERT_DIR"convert                     -rotate 90 -delay 200 $psfile $gifname
        "$CONVERT_DIR"convert  -geometry $thumbsize  -rotate 90 -delay 150 $psfile $thumbname
    fi



#    # is the GIF file newer than the gif thumbnail?
#
#    if [[ $mgifname -nt $mgifthumb  &&  $nogifs -ne 1 ]]
#    then
#        msg "    [Converting to GIF: $mgifname, $mgifthumb]"
#
#
#        # first copy over the 'wait' .gif files in case the conversion
#        # does not work
#        
#        cp $no_output_small $mgifthumb
#        chmod u+w $mgifthumb
#
#
#        # ok, now do the conversion....
#
#        "$CONVERT_DIR"convert  -geometry $thumbsize  -delay 150 $mgifname $mgifthumb
#    fi


done




# create the montages between the two versions of Magics

if [[ $nogifs -eq 0 && $nomontage -eq 0 ]]
then
    for srcfile in src/$outdir/*.f
    do
        bname=`basename $srcfile .f`

        for proj in CYLINDRICAL POLAR_STEREOGRAPHIC ; do
            mpp_gifname=$gifdir/"$bname"_mpp_"$proj"_med.gif
            m69_gifname=$gifdir/"$bname"_m69_"$proj"_med.gif
            montage_gifname=$gifdir/"$bname"_both_"$proj".gif
            montage_thumbname=$gifdir/"$bname"_both_small_"$proj".gif

            # is either source GIF newer than the montage GIF?

            if [[ ! -a $montage_gifname  ||  $mpp_gifname -nt $montage_gifname || $m69_gifname -nt $montage_gifname ]]
            then
                msg "Making montage for $bname"

                "$CONVERT_DIR"convert $mpp_gifname $m69_gifname -append -geometry x486 $montage_gifname
                "$CONVERT_DIR"convert $mpp_gifname $m69_gifname -append -geometry x64  $montage_thumbname
            fi
        done
    done
fi


# copy our static icons across if necessary

cp -u icons/* $psdir
for iconfile in icons/*.gif
do
    chmod ug+w $psdir/`basename $iconfile`
done


# remove any object files (seem to be created when using static library)

rm -f *.o


# echo our summary to a log file

echo $summary          >> logs/summary.txt
echo "-------$newline" >> logs/summary.txt
echo `date`            >> logs/summary.txt



# finally, run the 'tohtml' utility to copy all program source and timings
# to the html directory

msg "Generating HTML..."
cd ../..
./tohtml $staticmpp $tohtmlfortranflag


# we want to archive the timing summary files, so generate a unique filename
# and copy the file

date_stamp=`date | sed 's/ /_/g'`

echo $staticmpp
if [[ $staticmpp = "-static" ]]
then
    linktype="static"
else
    linktype="shared"
fi

timings_archive_dir=html/test/fortran/timings_archive
timings_archive_file="$timings_archive_dir/timings_${date_stamp}_$linktype.html"

mkdir -p $timings_archive_dir
cp html/test/fortran/timings.html $timings_archive_file


# create a date string, replace spaces with underscores
msg "Done: $date_stamp"


# beep at the user to tell them its done

echo "\a" ; sleep 0.2 ; echo "\a" ; sleep 0.2 ; echo "\a"
