#!/bin/ksh
# Compiles and runs the C Magics++ examples

# Parse command-line arguments
# Possible options:
#   -checkup      : Runs the examples intended for the checkup test suite
#   -manual       : Runs the examples for the manual
#   -tutorial     : Runs the examples for the tutorial
#   -nogifs       : PostScript output will not be converted to GIF format
#   -plain_names  : Leaves the output filenames alone (omits _mpp_projection)
#   -staticmpp    : Use the static magics++ library
#   -www          : Runs the examples for the web documentation
#   -nocompile    : all programs will be re-run without first being recompiled
#   -rmafter      : Executables will be removed after being run
#   -verbose      : Echos compiler commands to stdout

. ./message.ksh


filespec=*.c
srcdir="c/test"
static=""
nogifs=0
nocompile=0
verbose=0
plain_names=0
www=0
plain_names=0
rmafter=0
tohtml=1
devices="PS"
projections="CYLINDRICAL"
outdir="test/c"
thumbsize="180X252"

summary="-------\n
Unless overridden by the flags below, the shared library is used.\n
testsuite flags:"


# test the command-line arguments

for arg;do
    if [[ $arg = "-h" || $arg = "-help" || $arg = "--help" ]]
    then
        echo ""
        echo "make_c_testsuite"
        echo "Possible options:"
        echo "   -checkup      : The programs for the checkup test suite will be run"
        echo "   -manual       : The programs for the manual will be run"
        echo "   -tutorial     : The programs for the turorial will be run"
        echo "   -www          : The programs for the web documentation will be run"
        echo "   -nogifs       : PostScript output will not be converted to GIF format"
        echo "   -staticmpp    : Use the static magics++ library"
        echo "   -rmafter      : Executables will be removed after being run"
        echo "   -verbose      : Echos compiler commands to stdout"
        echo ""
        exit
    fi

    if [[ $arg = "-checkup" ]]
    then
    	echo "Generating plots for checkup"
        srcdir="c/checkup"
        outdir="checkup/fortran"
    fi

    if [[ $arg = "-manual" ]]
    then
    	echo "Generating plots for manual"
        srcdir="c/manual"
        tohtml=0
    fi

    if [[ $arg = "-tutorial" ]]
    then
    	echo "Generating plots for tutorial"
        srcdir="c/tutorial"
        outdir="tutorial/c"
        tohtml=0

    fi

    if [[ $arg = "-www" ]]
    then
    	echo "Generating plots for WWW"
        srcdir="c/www"
        outdir="examples/c"
        www=1
    fi

    if [[ $arg = "-nogifs" ]]
    then
        nogifs=1
    fi

    if [[ $arg = "-nocompile" ]]
    then
        nocompile=1
    fi

    if [[ $arg = "-staticmpp" ]]
    then
        static="-static"
        summary="$summary\n static library"
    fi

    if [[ $arg = "-noodb" ]]
    then
        noodb="-noodb"
    fi

    if [[ $arg = "-plain_names" ]]
    then
        plain_names=1
    fi

    if [[ $arg = "-rmafter" ]]
    then
        rmafter=1
    fi

    if [[ $arg = "-valgrind" ]]
    then
        valgrind="-valgrind"
        summary="$summary\n run through valgrind"
    fi

    if [[ $arg = "-verbose" ]]
    then
        verbose=1
    fi
done


# if the source directory does not exist, then exit gracefully

if [[ ! -a $srcdir ]]
then
    echo "Source directory $srcdir does not exist - exiting."
    exit
fi



. ./setconvert
echo "Using convert from directory: $CONVERT_DIR"


mkdir -p ../../html/$outdir


# -------------------------------------------------------------------------------


# Compile each program in turn

for srcfile in $srcdir/$filespec
do
    bname=`basename $srcfile .c`
    progname="$bname"_mpp
    progfile=bin/"$bname"_mpp
    defaultpsname="magics_output.ps"
    compile_log=logs/"$bname"_mpp_compile.log

    msg "    [Checking $bname]"
    

    # is the source file newer than the binary program?

    if [[ ! -a $progfile  ||  $srcfile -nt $progfile  ||  $nocompile -eq 1 ]]
    then

        msg "Recompiling program $progfile"


        # compile using the correct flags from magics-config

        if [[ $nocompile -eq 0 ]]  # compile unless flag is set
        then

            rm -f $compile_log

#            compiler1="gcc $static $srcfile -o $progfile `magics-config --cxxflags`"
            compiler1="gcc $srcfile -o $progfile `magics-config --cxxflags --clibs`"

            if [[ $verbose -eq 1 ]]
	        then
                msg "    $compiler1"
            fi

            $compiler1  > $compile_log 2>> $compile_log
            sleep 1   # sometimes the binary is not ready for execution
        fi



        for device in $devices ; do

            typeset -l ext=".$device"


            # if using GIF, then we have to compensate for the new (Feb 2006)
            # filenaming convention. If we ask for 'name.gif', we get 'name_01.gif'.
            

            if [[ $ext = ".gif" ]]
            then
                ext="1.gif"   # WAS: ext="_01.gif"
            fi



            for proj in $projections ; do


                if [[ $www -eq 1 ]]   # for www?
                then
                    projext=""
                    extraspec="_mpp"
                else
                    projext="_$proj"
                    extraspec="_mpp_$proj"
                fi


                origoutname=$bname$ext
                pdfoutname=$bname.pdf
                logfile=logs/$bname$extraspec.$device.log
                errfile=logs/$bname$extraspec.$device.err
                timefile=logs/$bname$extraspec.$device.time
                vlogfile=logs/$bname$extraspec.vlog
                newoutname=$progname$projext$ext
                pdfnewoutname=$progname$projext.pdf


                # check if the user wants to run the programs through Valgrind or just run normally

                if [[ $valgrind -eq 1 ]]
                then
                    valgrind --leak-check=full $progfile $option_flags PROJECTION $proj   DEVICE $device 2> $vlogfile
                else
                    (time ($progfile $option_flags PROJECTION $proj   DEVICE $device> $logfile 2> $errfile)) 2> $timefile
                fi


                if [[ -a $defaultpsname ]]        # hopefully temporary if proper .ps name is not used
                then
                    mv $defaultpsname $origoutname
                fi


                # should we rename the output file(s)?

                if [[ $plain_names -eq 0 ]]
                then
                    mv  $origoutname ps/$newoutname
                    echo "mv  $origoutname ps/$newoutname"

                    if [[ -a $pdfoutname ]]
                    then
                        mv  $pdfoutname  ps/$pdfnewoutname # >&! /dev/null # PDF is produced alongside PS
                    fi
                else
                    mv  $origoutname ps

                    if [[ -a $pdfoutname ]]
                    then
                        mv  $pdfoutname  ps                # >&! /dev/null # PDF is produced alongside PS
                    fi
                fi


                # deal with multiple page outputs (SVG)

                for page in $pages ; do
                    origoutname=$bname$page$ext

                    if [[ $plain_names -eq 0 ]]
                    then
                        newoutname="$progname"_"$proj"_"$page"$ext
                    else
                        newoutname=$origoutname
                    fi

                    if [[ -a $origoutname  ]]  # if it exists, then rename & move it
                    then
                        mv $origoutname ps/$newoutname
                    fi
                done

            done
        done

        rm -f $preprocname
        
        if [[ $rmafter -eq 1 ]]  # remove the executable after running it?
        then
            rm -f $progfile
        fi
        
    fi
done


# ---------------------------------------------------------------------------------------

# copy the log/error files across

gifdir=../../html/$outdir
psdir=../../html/$outdir
logdir=../../html/$outdir

for file in logs/*.log
do
    cp -u $file $logdir
done

for file in logs/*.vlog
do
    cp -u $file $logdir
done

for file in logs/*.err
do
    cp -u $file $logdir
done

no_output_large="$gifdir/no_output.gif"
no_output_small="$gifdir/no_output_small.gif"


# ---------------------------------------------------------------------------------------

# convert the ps files to GIF for the web pages

for psfile in $psdir/*.ps
do
    bname=`basename $psfile .ps`
    gifname="$gifdir/$bname"_med.gif
    thumbname="$gifdir/$bname"_small.gif
#    msg "    GIFS? $psfile"
    
    # is the postscript file newer than the gif?

    if [[ $psfile -nt $thumbname  &&  $nogifs -ne 1 ]]
    then
        msg "    [Converting to GIF: $psfile, $thumbname]"


        # first copy over the 'wait' .gif files in case the conversion
        # does not work
        
        cp $no_output_small $thumbname
        chmod u+w $thumbname


        # ok, now do the conversion....

        "$CONVERT_DIR"convert  -geometry $thumbsize  -rotate 90 -delay 150 $psfile $thumbname
    fi

done


# ---------------------------------------------------------------------------------

# copy our static icons across if necessary

cp -u icons/* $psdir
for iconfile in icons/*.gif
do
    chmod ug+w $psdir/`basename $iconfile`
done


# remove any object files (seem to be created when using static library)

rm -f *.o


# echo our summary to a log file

echo $summary    >> logs/summary.txt
echo "-------\n" >> logs/summary.txt
echo `date`      >> logs/summary.txt



# finally, run the 'tohtml' utility to copy all program source and timings
# to the html directory

if [[ $tohtml -eq 1 ]]
then

  msg "Generating HTML..."
  cd ../..
  ./tohtml $static -c
fi

# create a date string, replace spaces with underscores
msg "Done: `date | sed 's/ /_/g'`"


