%manual

Description:  Hall charts
                  Low, medium and high cloud;
                  30m Winds and 2m Temperature

Mainframe:    servers

Related tasks:  phal....

Synopsis:

        . Use metview to produce plotfile.


Anticipated problems:

     For CONSOLE

        . If no clue, set to COMPLETE;
                      call METAPS the next working day.

     For METAPS

        . Script     /usr/local/share/metview

        . Output     Plot

%end
%include <qsub.h>
%include <config.h>
%include <trap.h>
%include <setup.h>
%include <plotdb.h>
%include <web.h>

cd $TMPDIR

YYYYMMDD=`substring $BASETIME 1 8 `
export YYYYMMDD

PLOT_DATE=$YYYYMMDD
export PLOT_DATE

PLOT_EXPVER=$EXPVER
export PLOT_EXPVER

export PLOT_TIME=$(substring $BASETIME 9 10)
export STEP_LIST=%STEP_LIST:12/to/180/by/24%

cat > dirs << \EOF
# =========================================================================
# phalt2m. Metview macro by Rogerio Bonifacio modified by Francois Lalaurette
# Depending on run-mode, prints out, prints to file or displays :
# Parameters		- 30m Winds, H/M/L clouds cover, T2
# Types			- AN, FC to day 7
# Geographical Area	-
#
# Hall Charts	:
# 	Top chart   	- H/M/L cloud cover
# 	Bottom chart	- 30m Winds, 2 meter Temperature
# =========================================================================
step_list = getenv('STEP_LIST')

# Define output device. Can be printer, ps.file or ps.file with icon
dv_printer = device (
		destination		:	"file",
		file_name		:	"ps",
		file_auto_numbering	:	"off",
		paper_format		:	"a3",
		orientation		:	"landscape",
		print_command		:	" ",
		use_title_from		:	"magics"
		)

dv_ps_icon = device(
		destination		:	"ICON",
		icon_prefix		:	"phalt2m.ps",
		paper_format		:	"a3",
		orientation		:	"landscape",
		use_title_from		:	"Magics"
		)

# Checks running mode and gets/sets date and experiment variables
mode = runmode()

if mode = 'batch' then
	setdevice(dv_printer)
end if

if mode = 'execute' then
	setdevice(dv_ps_icon)
end if

ddate = getenv("PLOT_DATE")
if ddate = '' then
	andate = date (-1)
else
	andate = date (ddate)
end if

expver = getenv("PLOT_EXPVER")
if expver = '' then
	expver = 1
end if

class = getenv("CLASS")
if class = '' then
    class = 'OD'
end if

stream = getenv("STREAM")
if stream = '' then
    stream = 'DA'
end if


print (" ")
print (" mode is ",mode, "; expver is ",expver, "; date is ",andate)
print (" ")

page_id = "Exp " & expver & " Stream " & stream


# Forecast data
l_step=parse(step_list,'/')
print (step_list)
print (l_step)

first = l_step[1]
last = l_step[3]
incr = l_step[5]

if first=0
then
	T2_AN = read(source:"2t.grib", param:'2t', type: "an")
	Wind_AN = read(source:"30mw.grib", param:["u","v"], type: "an")
	LCC_AN = read(source:"clouds.grib", param:'LCC',type:'an')
	MCC_AN = read(source:"clouds.grib", param:'MCC',type:'an')
	HCC_AN = read(source:"clouds.grib", param:'HCC',type:'an')
	print ("T2_AN has",count(T2_AN)," fields")
	T2_FC = read(source:"2t.grib", param:'2t', type: "fc", step: [incr,'to',last,'by',incr])
	Wind_FC = read(source:"30mw.grib", param:["u","v"], type: "fc", step: [incr,'to',last,'by',incr])
	LCC_FC = read(source: "clouds.grib", param:'LCC', type: "fc",step: [incr,'to',last,'by',incr])
	MCC_FC = read(source: "clouds.grib", param:'MCC', type: "fc",step: [incr,'to',last,'by',incr])
	HCC_FC = read(source: "clouds.grib", param:'HCC', type: "fc",step: [incr,'to',last,'by',incr])
	print ("T2_FC has",count(T2_FC)," fields")
	T2_fields  = merge (T2_AN, T2_FC)
	Wind_fields = merge (Wind_AN, Wind_FC)
	LCC_fields = merge (LCC_AN, LCC_FC)
	MCC_fields = merge (MCC_AN, MCC_FC)
	HCC_fields = merge (HCC_AN, HCC_FC)
else
	T2_fields = read(source:"2t.grib", param:'2t', type: "fc", step: [first,'to',last,'by',incr])
	Wind_fields = read(source:"30mw.grib", param:["u","v"], type: "fc", step: [first,'to',last,'by',incr])
	LCC_fields = read(source: "clouds.grib", param:'LCC', type: "fc",step: [first,'to',last,'by',incr])
	MCC_fields = read(source: "clouds.grib", param:'MCC', type: "fc",step: [first,'to',last,'by',incr])
	HCC_fields = read(source: "clouds.grib", param:'HCC', type: "fc",step: [first,'to',last,'by',incr])
	print ("T2_FC has",count(T2_fields)," fields")
end if
colour_resol=4
SCC_fields = (colour_resol*colour_resol*int(HCC_fields * (colour_resol-1) +0.5) + colour_resol * int(MCC_fields * (colour_resol-1)+0.5) + int((colour_resol-1)*LCC_fields+0.5))

#---------------------------------------------------------------------------------------------------------
# This is generated by a metview macro called cloud_colours.macro kept in ClearCase in the same
# location as this job.
# To modify: modify the macro for it to generate the palette you want, then run it as follows:
#  metview -b cloud_colours.macro > colours.txt
#  then replace the next 2 lines with the contents of the colours.txt file.
#---------------------------------------------------------------------------------------------------------
col_list=['HSL(0,0,1)','HSL(29,0.14,0.92)','HSL(29,0.29,0.83)','HSL(29,0.43,0.75)','HSL(300,0.08,0.92)','HSL(360,0.16,0.84)','HSL(13,0.3,0.75)','HSL(18,0.44,0.67)','HSL(300,0.16,0.83)','HSL(340,0.22,0.75)','HSL(360,0.34,0.67)','HSL(8,0.47,0.58)','HSL(300,0.24,0.75)','HSL(330,0.28,0.67)','HSL(349,0.38,0.58)','HSL(360,0.5,0.5)','HSL(180,0.17,0.92)','HSL(120,0.08,0.84)','HSL(57,0.17,0.75)','HSL(44,0.3,0.67)','HSL(209,0.14,0.84)','HSL(187,0,0.75)','HSL(29,0.15,0.67)','HSL(29,0.29,0.59)','HSL(239,0.16,0.75)','HSL(299,0.08,0.67)','HSL(360,0.17,0.58)','HSL(13,0.3,0.5)','HSL(258,0.21,0.67)','HSL(299,0.16,0.59)','HSL(341,0.22,0.5)','HSL(360,0.33,0.42)','HSL(180,0.34,0.83)','HSL(161,0.22,0.75)','HSL(120,0.16,0.67)','HSL(78,0.21,0.58)','HSL(193,0.3,0.75)','HSL(180,0.17,0.67)','HSL(120,0.08,0.58)','HSL(59,0.16,0.5)','HSL(209,0.29,0.67)','HSL(209,0.15,0.58)','HSL(217,0,0.5)','HSL(29,0.14,0.42)','HSL(224,0.3,0.58)','HSL(237,0.17,0.5)','HSL(299,0.08,0.42)','HSL(360,0.16,0.33)','HSL(180,0.5,0.75)','HSL(169,0.38,0.67)','HSL(150,0.28,0.58)','HSL(120,0.24,0.5)','HSL(188,0.47,0.67)','HSL(180,0.34,0.59)','HSL(160,0.22,0.5)','HSL(120,0.16,0.42)','HSL(198,0.44,0.58)','HSL(193,0.3,0.5)','HSL(180,0.17,0.42)','HSL(120,0.08,0.33)','HSL(209,0.43,0.5)','HSL(209,0.29,0.42)','HSL(209,0.14,0.33)','HSL(191,0,0.25)']
cont_list=[-0.5,0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5,13.5,14.5,15.5,16.5,17.5,18.5,19.5,20.5,21.5,22.5,23.5,24.5,25.5,26.5,27.5,28.5,29.5,30.5,31.5,32.5,33.5,34.5,35.5,36.5,37.5,38.5,39.5,40.5,41.5,42.5,43.5,44.5,45.5,46.5,47.5,48.5,49.5,50.5,51.5,52.5,53.5,54.5,55.5,56.5,57.5,58.5,59.5,60.5,61.5,62.5,63.5]

#---------------------------------------------------------------------------------------------------------

	SCC_contour = pcont(
			LEGEND                   :  'OFF',
			CONTOUR                  :  'OFF',
			contour_level_selection_type	:	"level_list",
			CONTOUR_level_list                  :  cont_list,
			CONTOUR_SHADE            :  'ON',
			contour_shade_technique	:	"cell_shading",
			#		CONTOUR_SHADE_MIN_LEVEL  :  0.5,
			#		CONTOUR_SHADE_MAX_LEVEL  :  colour_resol**3-0.5,
			CONTOUR_SHADE_COLOUR_METHOD:  'LIST',
		    CONTOUR_HILO			:	'OFF',
			CONTOUR_SHADE_CELL_RESOLUTION  : 20,
			CONTOUR_SHADE_CELL_METHOD	:	'NEAREST',
			CONTOUR_SHADE_COLOUR_LIST:  col_list,
			CONTOUR_SHADE_METHOD     :  'AREA_FILL',
			CONTOUR_SHADE_LABEL_BLANKING:  'OFF'
			)

Coastlines = pcoast(
        MAP_COASTLINE_COLOUR        :  'BROWN',
        MAP_COASTLINE_LAND_SHADE    :  'ON',
        MAP_COASTLINE_LAND_SHADE_COLOUR :  'CREAM',
        MAP_COASTLINE_THICKNESS     :  1,
        MAP_GRID            :  'ON',
        MAP_GRID_Colour             :  'MUSTARD',
        MAP_LABEL           :  'ON',
        MAP_LABEL_COLOUR        :  'BLACK',
	MAP_GRID_LATITUDE_INCREMENT	:	20.0,
	MAP_GRID_LONGITUDE_INCREMENT	:	20.0
        )
geography = (
		SUBPAGE_MAP_PROJECTION	:	'POLAR_STEREOGRAPHIC',
		area			:	[23, -33, 51, 72],
		background	:	Coastlines)

# Defines plot text
	SCC_text = ptext(
			TEXT_BORDER		: 'OFF',
			TEXT_LINE_2              :  "\\\CL"&
col_list[4]&"\\\L>ow,\\\CL"&
col_list[16]&"\\\ <L+M,\\\CL"&
col_list[13]&"\\\ M>edium,\\\CL"&
col_list[61]&"\\\ <M+H,\\\CL"&
col_list[49]&"\\\ H>igh,\\\CL"& 
col_list[52]&"\\\ <H+L,\\\CLBLACK\\\ H+M+L\\\CLR\\\ >clouds",
			TEXT_TITLES_TABLE_USE	: 'OFF',
			TEXT_MERGE		: 'YES',
			TEXT_FIRST_LINE		:  2,
			TEXT_LINE_COUNT		: 2,
			TEXT_REFERENCE_CHARACTER_HEIGHT :   0.40,
			TEXT_JUSTIFICATION              :   'LEFT',
			TEXT_QUALITY                    :   'HIGH'
			)



T2_text = ptext(
		TEXT_REFERENCE_CHARACTER_HEIGHT	:	0.27,
		TEXT_JUSTIFICATION		:	'LEFT',
		TEXT_QUALITY			:	'HIGH',
		TEXT_LINE_2			:	'30 Metre Winds / 2 Metre Temperature'
		)


# Defines Visual Definitions

T2_contour = pcont(
		CONTOUR_LEVEL_SELECTION_TYPE	:	'INTERVAL',
		CONTOUR_INTERVAL		:	4.0,
		CONTOUR_LABEL_QUALITY		:	'HIGH',
		CONTOUR_HILO			:	'OFF',
		CONTOUR_LINE_STYLE		:	'DOT',
		CONTOUR_LINE_THICKNESS		:	3,
		CONTOUR_HIGHLIGHT_THICKNESS	:	5,
		CONTOUR_HIGHLIGHT_FREQUENCY	:	20,
		CONTOUR_HIGHLIGHT_STYLE		:	'DASH',
		CONTOUR_SHADE			:	'ON',
		CONTOUR				:	'OFF',
		CONTOUR_SHADE_METHOD		:	'AREA_FILL',
		CONTOUR_SHADE_COLOUR_METHOD	:	'LIST',
		CONTOUR_SHADE_COLOUR_LIST	:	["BLUE_PURPLE",
			"GREENISH_BLUE","BLUE_GREEN",
			"BLUISH_GREEN",
			"YELLOW_GREEN",
			"GREENISH_YELLOW",
			"YELLOW","ORANGISH_YELLOW","ORANGE_YELLOW",
			"YELLOWISH_ORANGE",
			"ORANGE","REDDISH_ORANGE",
			"RED_ORANGE","ORANGISH_RED","RED","MAGENTA",
			"MAGENTA"],
		CONTOUR_SHADE_MIN_LEVEL		:	-24.0,
		CONTOUR_SHADE_MAX_LEVEL		:	44.0
#		CONTOUR_SHADE_MIN_LEVEL_DENSITY	:	150.0,
#		CONTOUR_SHADE_MAX_LEVEL_DENSITY	:	350.0,
#		CONTOUR_SHADE_MIN_LEVEL_COLOUR	:	'CYAN',
#		CONTOUR_SHADE_MAX_LEVEL_COLOUR	:	'YELLOW',
#		CONTOUR_SHADE_DOT_SIZE		:	0.02
		)

Wind_arrows = pwind(
		WIND_THINNING_FACTOR		:	3.0,
		WIND_ARROW_CROSS_BOUNDARY	:	'OFF'
		)

Wind_arrows_pics = pwind(
		WIND_THINNING_FACTOR		:	3.0,
		WIND_ARROW_CROSS_BOUNDARY	:	'OFF'
		)
if class = 'rd' then
    an_type = 'FC'
else
    an_type = 'AN'
end if
#
# Function below is needed because of problems with indexing of vector_fields
# As a consequence, note below retrievals threaded with plotting, instead
# of retrievals followed by merge() followed by plotting as in oow13

function vectorUV (data, step)
 	U = read(
 			data		:	data,
 			PARAM		:	'U',
			STEP		:	step
			)
	V = read(
 			data		:	data,
			PARAM		:	'V',
 			STEP		:	step
			)

	uv = merge(U,V)
	return uv
end vectorUV



	A3_horiz_x = 40.68
	A3_horiz_y = 27.64
	A3_2x2 = page(
			geography,
			PAGE_X_LENGTH		:	A3_horiz_x / 2.0,
			PAGE_Y_LENGTH		:	A3_horiz_y / 2.0,
			PAGE_FRAME		:	'OFF',
			PAGE_ID_LINE            :       'ON',
			PAGE_ID_LINE_SYSTEM_PLOT:       'OFF',
			PAGE_ID_LINE_DATE_PLOT  :       'OFF',
			PAGE_ID_LINE_ERRORS_PLOT:       'OFF',
			PAGE_ID_LINE_LOGO_PLOT  :       'OFF',
			PAGE_ID_LINE_USER_TEXT  :       page_id,
#F			SUBPAGE_X_POSITION	:	1.25,
			SUBPAGE_X_POSITION	:	1.0,
			SUBPAGE_Y_POSITION	:	0.75,
#F			SUBPAGE_X_LENGTH	:	18.84,
			SUBPAGE_X_LENGTH	:	18.5,
			SUBPAGE_Y_LENGTH	:	11.5
			)

	A3_sheet = superpage(
			SUPER_PAGE_X_LENGTH	:	A3_horiz_x,
			SUPER_PAGE_Y_LENGTH	:	A3_horiz_y,
			pages			:	[A3_2x2, A3_2x2, A3_2x2, A3_2x2]
			)

ip=1

       for i = first to last by 2*incr do
		plot (A3_sheet[2],  SCC_fields[ip], SCC_contour, SCC_text)
		plot (A3_sheet[4],  SCC_fields[ip+1], SCC_contour, SCC_text)
		vector_to_plot = vectorUV(Wind_fields, i)
		plot (A3_sheet[1], T2_fields[ip], T2_contour, vector_to_plot, Wind_arrows,T2_text)
		vector_to_plot = vectorUV(Wind_fields, i+incr)
		plot (A3_sheet[3], T2_fields[ip+1], T2_contour, vector_to_plot, Wind_arrows,T2_text)
		newpage (A3_sheet)
		ip = ip + 2
	end for
EOF

ln -s $WEBDATA/clouds.grib .
ln -s $WEBDATA/2t.grib .
ln -s $WEBDATA/30mw.grib .
$metview_cmd -b dirs
PSFILE

$plotdb_lpr -J $TASK -P ps_oa_a3_c ps


%include <endt.h>

