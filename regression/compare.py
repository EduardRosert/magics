#!/usr/bin/env python


"""The script runs a single test executable and compares its output image with 
a set of reference images generated by other magics versions. If number of 
different pixels between the output image and any of the reference images is 
larger than the threshold parameter, the script returns an error value. 

If output directory parameter is provided, a html report is generated for the test.
"""

__author__  = 'cgjd'
__date__    = '2013-09-24'
__version__ = '0.1'


import sys
import os
from subprocess import call
from optparse import OptionParser


def l(t,n): return (t+' '*n)[:n]

if __name__ == "__main__":
    cmd_parser = OptionParser(usage="usage: %prog <executable> <reference-file>", version='%prog : '+__version__, description = __doc__, prog = 'compare.py')
    
    print sys.argv
    
    #flags
    #cmd_parser.add_option("-v", "--verbose", action="store_true", dest="verbose",help="Verbose output while running")
    cmd_parser.add_option("-f", "--force",action="store_true", dest="force",help="Force overwrite of existing output files")
    
    #options
    cmd_parser.add_option("-i", "--interpreter" , default=None, help="Interpreter command")
    cmd_parser.add_option("-t", "--threshold" ,   default='50', help="Maximum number of different pixels")
    cmd_parser.add_option("-v", "--versions",     default=None, help='List of reference versions, defined as "<ver1> ... <verN>"')
    cmd_parser.add_option("-o", "--output",       default=None, help="output report directory (HTML)")

    (optional, positional) = cmd_parser.parse_args()

    #print positional
    #print optional
   
    #executable
    executable= ''
    if positional: executable= positional.pop(0)
    try:
        assert(os.path.exists(executable))
    except:
        sys.stderr.write(u"No executable '%s' found.\n"%executable)
        sys.exit(1)

    #reference 
    reference= ''
    if positional:
        reference= positional.pop(0)
    else:
        sys.stderr.write(u"No reference file defined.\n")
        sys.exit(1)
    try:
        assert(optional.force or not os.path.exists(reference))
    except:
        sys.stderr.write(u"Clean file '%s' before running the test. Use -f to force overwrite.\n"%reference)
        sys.exit(1)

    #force
    if optional.force: os.system('rm '+reference)

    #threshold    
    threshold= 50#default 
    try:
        threshold= int(optional.threshold)
    except:
         sys.stderr.write(u"Invalid threshold '%s': can not convert into integer number.\n"%optional.threshold)
         sys.exit(1)

    #versions
    versions= []
    if optional.versions: versions= optional.versions.split(' ')
    for ver in versions:
        try:
            assert(os.path.exists(ver+'_'+reference))
        except:
            sys.stderr.write(u"No version reference file '%s' found.\n"%(ver+'_'+reference,))
            sys.exit(1)

    #output dir
    output_dir= optional.output
    if output_dir:
        try:
            assert(os.path.exists(output_dir))
        except:
            sys.stderr.write(u"No output directory '%s' found.\n"%output_dir)
            sys.exit(1)

#####################################################################

    #print input parameters
    print l('test executable:',  20), executable
    print l('test reference:',   20), reference
    print l('threshold:',        20), '%d pixels'%threshold
    print l('versions:',         20), versions 
    print l('output dir (HTML):',20), output_dir

#####################################################################

    #execute the test
    print 'Test started'
    if optional.interpreter:
        e = call([optional.interpreter,executable])
    else:
        e = call(executable,shell=True)
    print 'Test finished'

    #check if output generated
    if not os.path.exists(reference):
		sys.stderr.write(u"Output file %s has not been generated.\n"%reference)
		sys.exit(1)
    else:
        print "Output file '%s' has been generated"%reference
        #sys.exit(0)

#####################################################################

    diff_pixels= []

    #for each reference version
    for version in versions:

        #compare with test's output
        ver_ref= version+'_'+reference
        command='compare -metric AE -dissimilarity-threshold 1 "%s" "%s" diff_%s 2>  %s_compare.err'%(reference,ver_ref,ver_ref,version)
        print command,
        os.system(command)
        print 'ok' 
        with open(version+'_compare.err','r') as f: diff_pixels.append(int(f.read()))


    max_diff = max(diff_pixels)
    if max_diff>=threshold:
		sys.stderr.write(u"TEST FAILED: Maximum number of differrent pixels is %d (threshold %d ).\n"%(max_diff, threshold))
		sys.exit(1)
    else:
		sys.stderr.write(u"TEST OK: Maximum number of differrent pixels is %d (threshold %d ).\n"%(max_diff, threshold))
		sys.exit(0)


