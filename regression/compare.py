#!/usr/bin/env python


"""The script runs a single test executable and compares its output plot with
 a set of reference plots generated by other magics versions. If percentage of
different pixels between the output plot and any of the reference plots is larger
than defined threshold, the script returns an error value.

If output directory is provided, a html report is generated for the test.
"""

__author__  = 'cgjd'
__date__    = '2013-09-24'
__version__ = '0.1'


import sys
import os
from subprocess import call
from optparse import OptionParser


def l(t,n): return (t+' '*n)[:n]


if __name__ == "__main__":
    cmd_parser = OptionParser(usage="usage: %prog <executable> <reference-file>", version='%prog : '+__version__, description = __doc__, prog = 'compare.py')

    #flags
    #cmd_parser.add_option("-v", "--verbose", action="store_true", dest="verbose",help="Verbose output while running")
    cmd_parser.add_option("-f", "--force",action="store_true", dest="force",help="Force overwrite of existing output files")
    
    #options
    cmd_parser.add_option("-t", "--threshold" , default='0.5',help="Maximum different pixels percentage")
    cmd_parser.add_option("-v", "--versions",   default=None, help='List of reference versions, defined as "<ver1> <ver2> ... <verN>"')
    cmd_parser.add_option("-o", "--output",     default=None, help="output report directory (HTML)")

    (optional, positional) = cmd_parser.parse_args()

    #print positional
    #print optional
   
    #executable
    executable= ''
    if positional: executable= positional.pop(0)
    try:
        assert(os.path.exists(executable))
    except:
        sys.stderr.write(u"No executable '%s' found.\n"%executable)
        sys.exit(1)

    #reference 
    reference= ''
    if positional:
        reference= positional.pop(0)
    else:
        sys.stderr.write(u"No reference file defined.\n")
        sys.exit(1)
    try:
        assert(optional.force or not os.path.exists(reference))
    except:
        sys.stderr.write(u"Clean file '%s' before running the test. Use -f to force overwrite.\n"%reference)
        sys.exit(1)

    #force
    if optional.force: os.system('rm '+reference)

    #threshold    
    threshold= 0.05 #default 0.5%
    try:
        threshold= float(optional.threshold)
    except:
         sys.stderr.write(u"Invalid threshold '%s': can not convert into float.\n"%optional.threshold)
         sys.exit(1)

    #versions
    versions= []
    if optional.versions: versions= optional.versions.split(' ')
    for ver in versions:
        try:
            assert(os.path.exists(ver+'_'+reference))
        except:
            sys.stderr.write(u"No version reference file '%s' found.\n"%(ver+'_'+reference,))
            sys.exit(1)

    #output dir
    output_dir= optional.output
    if output_dir:
        try:
            assert(os.path.exists(output_dir))
        except:
            sys.stderr.write(u"No output directory '%s' found.\n"%output_dir)
            sys.exit(1)

#####################################################################

    #print input parameters
    print l('test executable:',  20), executable
    print l('test reference:',   20), reference
    print l('threshold:',        20), '%.4f'%threshold
    print l('versions:',         20), versions 
    print l('output dir (HTML):',20), output_dir

#####################################################################

    #execute the test
    print 'Test started'
    e = call(executable,shell=True)
    print 'Test finished'

    e = os.path.exists(reference)
    if not e:
		sys.stderr.write(u"Output file %s has not been generated.\n"%reference)
		sys.exit(1)
    else:
        print "Output file %s has been generated"%reference
        sys.exit(0)

