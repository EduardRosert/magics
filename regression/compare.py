#!/usr/bin/env python


"""The script runs a single test executable and compares its output image with 
a set of reference images generated by other magics versions. If number of 
different pixels between the output image and any of the reference images is 
larger than the threshold parameter, the script returns an error value. 

If output directory parameter is provided, a html report is generated for the test.
"""

__author__  = 'cgjd'
__date__    = '2013-09-24'
__version__ = '0.1'

import sys
import os
from subprocess import call,check_output,Popen,PIPE,STDOUT
from optparse import OptionParser

def l(t,n): return (t+' '*n)[:n]

if __name__ == "__main__":
    cmd_parser = OptionParser(usage="usage: %prog <executable> <reference-file>", version='%prog : '+__version__, description = __doc__, prog = 'compare.py')

#####################################################################    
    print sys.argv
#####################################################################
    
    #flags
    #cmd_parser.add_option("-v", "--verbose", action="store_true", dest="verbose",help="Verbose output while running")
    cmd_parser.add_option("-f", "--force",action="store_true", dest="force",help="Force overwrite of existing output files")
    
    #options
    cmd_parser.add_option("-i", "--interpreter" , default=None,  help="Interpreter command")
    cmd_parser.add_option("-t", "--threshold" ,   default='1.0', help="Maximum percentage of different pixels")
    cmd_parser.add_option("-v", "--versions",     default=None,  help='List of reference versions, defined as "<ver1> ... <verN>"')
    cmd_parser.add_option("-o", "--output",       default=None,  help="Output report directory (HTML)")

    (optional, positional) = cmd_parser.parse_args()

    #executable
    executable= ''
    if positional: executable= positional.pop(0)
    try:
        assert(os.path.exists(executable))
    except:
        sys.stderr.write(u"No executable '%s' found.\n"%executable)
        sys.exit(1)

    #reference 
    reference= ''
    if positional:
        reference= positional.pop(0)
    else:
        sys.stderr.write(u"No reference file defined.\n")
        sys.exit(1)
    try:
        assert(optional.force or not os.path.exists(reference))
    except:
        sys.stderr.write(u"Clean file '%s' before running the test. Use -f to force overwrite.\n"%reference)
        sys.exit(1)


    #interpreter
    interpreter= ''
    if optional.interpreter: interpreter= optional.interpreter

    #force
    if optional.force and os.path.exists(reference): call(['rm',reference])

    #threshold    
    threshold= 1.0#default 
    try:
        threshold= float(optional.threshold)
    except:
         sys.stderr.write(u"Invalid threshold '%s': can not convert into float number.\n"%optional.threshold)
         sys.exit(1)

    #versions
    versions= []
    if optional.versions: versions= optional.versions.strip().split(' ')
    for ver in versions:
        try:
            assert(os.path.exists(ver+'_'+reference))
        except:
            sys.stderr.write(u"No version reference file '%s' found.\n"%(ver+'_'+reference,))
            sys.exit(1)

    #output dir
    output_dir= optional.output
    if output_dir:
        try:
            assert(os.path.exists(output_dir))
        except:
            sys.stderr.write(u"No output directory '%s' found.\n"%output_dir)
            sys.exit(1)

#####################################################################

    #print input parameters
    print l('test executable:',  20), (interpreter +' '+ executable).strip()
    print l('test reference:',   20), reference
    print l('threshold:',        20), '%.2f%%'%threshold
    print l('versions:',         20), versions 
    print l('output dir (HTML):',20), output_dir

#####################################################################

    #execute the test
    p= None
    if not interpreter=='':
        p = Popen([interpreter,executable],stdout=PIPE, stderr=PIPE)
    else:
        p = Popen(executable,stdout=PIPE, stderr=PIPE,shell=True)
    stdout,stderr= p.communicate()

    #check if output generated
    if not os.path.exists(reference):
		sys.stderr.write(u"TEST FAILED: Output file %s has not been generated.\n"%reference)
		sys.exit(1)

#####################################################################

    #get number of pixels of output image
    description= check_output(['identify',reference])                 
  
    #description="reference PNG 994x1402 994x1402+0+0 8-bit PseudoClass 9c 33.6KB 0.020u 0:00.020"
    x,y= [int(x) for x in description.split(' ')[2].split('x')]
    pixels= x*y

#####################################################################

    diff_pixels= []

    #for each reference version
    for version in versions:

        #compare with test's output
        ver_ref= version+'_'+reference
        command='compare -metric AE -dissimilarity-threshold 1 "%s" "%s" diff_%s 2>  %s_compare.err'%(reference,ver_ref,ver_ref,version)
        call(command,shell=True)
        with open(version+'_compare.err','r') as f: diff_pixels.append(int(f.read()))

    max_diff = max(diff_pixels)
    if 100.0*max_diff/pixels>=threshold:
		sys.stderr.write(u"TEST FAILED: Maximum number of different pixels is %d (%.2f%%).\n"%(max_diff,100.0*max_diff/pixels))
		sys.exit(1)
    else:
		sys.stderr.write(u"TEST OK: Maximum number of different pixels is %d (%.2f%%).\n"%(max_diff,100.0*max_diff/pixels))
		sys.exit(0)