#!/usr/bin/env python

"""The script runs a single test executable and compares its output image with 
a set of reference images generated by other magics versions. If number of 
different pixels between the output image and any of the reference images is 
larger than the threshold parameter, the script returns an error value. 

If output directory parameter is provided, a html report is generated for the test.
"""

__author__  = 'cgjd'
__date__    = '2013-09-24'
__version__ = '0.1'

import sys
import json
import os
import resource
from subprocess import call,check_output,Popen,PIPE
from optparse import OptionParser
from datetime import datetime
from regression_util import extension,prefix,writeHtmlReport,usage2Dict,ImageMagick_compare

#####################################################################
#####################################################################
#####################################################################

def compare(versions,interpreter,executable,reference,threshold,output_dir):

    #print input parameters
    def l(t,n): return (t+' '*n)[:n]
    print l('test executable:',  20), (interpreter +' '+ executable).strip()
    print l('test reference:',   20), reference
    print l('threshold:',        20), '%.2f%%'%threshold
    print l('versions:',         20), versions 
    print l('output dir (HTML):',20), output_dir

    #run the test
    p= None
    if not interpreter=='':
        p = Popen([interpreter,executable],stdout=PIPE, stderr=PIPE)
    else:
        p = Popen(executable,stdout=PIPE,stderr=PIPE,shell=True)

    #get test's run information
    stdout,stderr= p.communicate()
    usage= usage2Dict(resource.getrusage(resource.RUSAGE_CHILDREN))

    #check if output generated
    if not os.path.exists(reference):
        sys.stderr.write(u"TEST FAILED: Output file %s has not been generated.\n"%reference)
        sys.exit(1)

    #get number of pixels of output image
    description= check_output(['identify',reference])                 
  
    #description="reference PNG 994x1402 994x1402+0+0 8-bit PseudoClass 9c 33.6KB 0.020u 0:00.020"
    x,y= [int(x) for x in description.split(' ')[2].split('x')]
    pixels= x*y

    #for each reference version
    diff= {}
    for version in versions:
        #compare with test's output and keep number of different pixels
        ver_ref= prefix(reference,version+'_')
        ver_dif= prefix(reference,version+'_diff_')
        diff[version]= ImageMagick_compare(reference,ver_ref,ver_dif)

    #save all test files into specified output directory 
    if output_dir:
    
        #save test run information into files
        with open(extension(reference,'out'),'w') as f: f.write(stdout)
        with open(extension(reference,'err'),'w') as f: f.write(stderr)
        with open(extension(reference,'usa'),'w') as f: f.write(json.dumps(usage,sort_keys=True,indent=4, separators=(',', ': ')))

        #save parameters as well
        params= {
            'versions':    versions, 
            'interpreter': interpreter, 
            'executable':  executable, 
            'reference':   reference, 
            'threshold':   threshold, 
            'output_dir':  output_dir,
            'time':        str(datetime.now()),
            'diff':        diff
        }
        with open(extension(reference,'par'),'w') as f: f.write(json.dumps(params,sort_keys=True,indent=4, separators=(',', ': ')))

        #generate an output report
        report= writeHtmlReport(params,usage)
        report_filename= extension(reference,'html')        
        with open(report_filename,'w') as f: f.write(report)
        
        #finally, copy the files into output directory
        files_to_copy=  [reference,
                         extension(reference,'html'),
                         extension(reference,'out'),
                         extension(reference,'usa'),
                         extension(reference,'err'),
                         extension(reference,'par')]
        files_to_copy+= [prefix(reference,version+'_') for version in versions]#version reference files
        files_to_copy+= [prefix(reference,version+'_diff_') for version in versions]#difference calculated by compare
        
        for filename in files_to_copy:
            target= output_dir+'/'+filename
            e= call(["scp",filename,target])
            if not e==0:
                sys.stderr.write("ERROR coping the file '%s' into '%s'"%(filename,target))


    #fail if, FOR ANY TEST, the threshold is passed 
    max_diff = max(diff.values())
    if 100.0*max_diff/pixels>=threshold:
        sys.stderr.write(u"TEST FAILED: Maximum number of different pixels is %d (%.2f%%).\n"%(max_diff,100.0*max_diff/pixels))
        sys.exit(1)
    else:
        sys.stderr.write(u"TEST OK: Maximum number of different pixels is %d (%.2f%%).\n"%(max_diff,100.0*max_diff/pixels))
        sys.exit(0)

#####################################################################
#####################################################################
#####################################################################

if __name__ == "__main__":

#####################################################################
#####################################################################
#####################################################################

    
    cmd_parser = OptionParser(usage="usage: %prog <executable> <reference-file>", version='%prog : '+__version__, description = __doc__, prog = 'compare.py')

    print sys.argv#REMOVE??
    
    #flags
    #cmd_parser.add_option("-v", "--verbose", action="store_true", dest="verbose",help="Verbose output while running")
    cmd_parser.add_option("-f", "--force",action="store_true", dest="force",help="Force overwrite of existing output files")
    
    #options
    cmd_parser.add_option("-i", "--interpreter" , default=None,  help="Interpreter command")
    cmd_parser.add_option("-t", "--threshold" ,   default='1.0', help="Maximum percentage of different pixels")
    cmd_parser.add_option("-v", "--versions",     default=None,  help='List of reference versions, defined as "<ver1> ... <verN>"')
    cmd_parser.add_option("-o", "--output",       default=None,  help="Output report directory (HTML)")

    (optional, positional) = cmd_parser.parse_args()

    #executable
    executable= ''
    if positional: executable= positional.pop(0)
    try:
        assert(os.path.exists(executable))
    except:
        sys.stderr.write(u"No executable '%s' found.\n"%executable)
        sys.exit(1)

    #reference 
    reference= ''
    if positional:
        reference= positional.pop(0)
    else:
        sys.stderr.write(u"No reference file defined.\n")
        sys.exit(1)
    try:
        assert(optional.force or not os.path.exists(reference))
    except:
        sys.stderr.write(u"Clean file '%s' before running the test. Use -f to force overwrite.\n"%reference)
        sys.exit(1)

    #interpreter
    interpreter= ''
    if optional.interpreter: interpreter= optional.interpreter

    #force
    if optional.force and os.path.exists(reference): call(['rm',reference])

    #threshold    
    threshold= 1.0#default 
    try:
        threshold= float(optional.threshold)
    except:
        sys.stderr.write(u"Invalid threshold '%s': can not convert into float number.\n"%optional.threshold)
        sys.exit(1)

    #versions
    versions= []
    if optional.versions: versions= optional.versions.strip().split(' ')
    for ver in versions:
        try:
            assert(os.path.exists(ver+'_'+reference))
        except:
            sys.stderr.write(u"No version reference file '%s' found.\n"%(ver+'_'+reference,))
            sys.exit(1)

    #output dir
    output_dir= optional.output
    if output_dir:
        try:
            assert(os.path.exists(output_dir))
        except:
            sys.stderr.write(u"No output directory '%s' found.\n"%output_dir)
            sys.exit(1)

    compare(versions,interpreter,executable,reference,threshold,output_dir)
    